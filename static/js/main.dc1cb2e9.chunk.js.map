{"version":3,"sources":["const/app-routes.ts","components/Header.tsx","components/Invoice.tsx","components/Filters.tsx","views/Invoices.tsx","views/Overview.tsx","views/Settings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AppRoute","Header","pathname","useLocation","useState","title","setTitle","useEffect","getTitle","Overview","Invoices","Settings","className","Invoice","name","price","date","status","Filters","invoices","map","i","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8LAAYA,E,6EAAAA,K,aAAAA,E,qBAAAA,E,sBAAAA,M,iBCICC,EAAc,WAAO,IACxBC,EAAaC,cAAbD,SADuB,EAELE,mBAAS,IAFJ,mBAExBC,EAFwB,KAEjBC,EAFiB,KAG/BC,qBAAU,WACRC,EAASN,KACR,IAEH,IAAMM,EAAW,SAACN,GAChB,OAAQA,GACN,KAAKF,EAASS,SAEZ,YADAH,EAAS,YAEX,KAAKN,EAASU,SAEZ,YADAJ,EAAS,YAEX,KAAKN,EAASW,SAEZ,YADAL,EAAS,YAEX,QACE,SAIN,OACE,4BAAQM,UAAU,UAChB,wBAAIA,UAAU,uDACXP,KCrBIQ,EAAsB,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OACvD,OACE,yBACEL,UAAS,wEACPK,EAAS,kBAAoB,sBAG/B,yBAAKL,UAAU,mBACb,uBAAGA,UAAU,0BAA0BE,IAEzC,yBAAKF,UAAU,+BACb,2BAAIG,EAAJ,QACA,uBAAGH,UAAU,YAAYI,MCnBpBE,EAAU,WACrB,OACE,yBAAKN,UAAU,WACb,0BAAMA,UAAU,wCAAhB,OACA,0BAAMA,UAAU,wCAAhB,QACA,0BAAMA,UAAU,wCAAhB,YCJAO,EAAW,CACf,CACEL,KAAM,uBACNC,MAAO,SACPC,KAAM,aACNC,QAAQ,GAEV,CACEH,KAAM,4BACNC,MAAO,SACPC,KAAM,aACNC,QAAQ,GAEV,CACEH,KAAM,sBACNC,MAAO,SACPC,KAAM,aACNC,QAAQ,GAEV,CACEH,KAAM,cACNC,MAAO,SACPC,KAAM,aACNC,QAAQ,GAEV,CACEH,KAAM,UACNC,MAAO,QACPC,KAAM,aACNC,QAAQ,GAEV,CACEH,KAAM,mBACNC,MAAO,QACPC,KAAM,YACNC,QAAQ,IAICP,EAAW,WACtB,OACE,yBAAKE,UAAU,QACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,2BACZO,EAASC,KAAI,SAACC,GAAD,OACZ,kBAAC,EAAYA,SC7CjBF,EAAW,CACf,CACEL,KAAM,uBACNC,MAAO,SACPC,KAAM,aACNC,QAAQ,GAEV,CACEH,KAAM,4BACNC,MAAO,SACPC,KAAM,aACNC,QAAQ,GAEV,CACEH,KAAM,sBACNC,MAAO,SACPC,KAAM,aACNC,QAAQ,IAICR,EAAW,WACtB,OACE,oCACE,yBAAKG,UAAU,oDACf,yBAAKA,UAAU,QACb,yBAAKA,UAAU,+BACZO,EAASC,KAAI,SAACC,GAAD,OACZ,kBAAC,EAAYA,UC7BZV,EAAW,WACtB,OAAO,0CC0CMW,MArCf,WACE,OACE,kBAAC,IAAD,KACE,oCAcE,kBAAC,EAAD,MAIA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAMvB,EAASW,UACpB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOY,KAAMvB,EAASU,UACpB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOa,KAAMvB,EAASS,UACpB,kBAAC,EAAD,WCzBQe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dc1cb2e9.chunk.js","sourcesContent":["export enum AppRoute {\r\n  Overview = \"/\",\r\n  Invoices = \"/invoices\",\r\n  Settings = \"/settings\",\r\n}\r\n","import React, { SFC, useState, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { AppRoute } from \"const\";\r\n\r\nexport const Header: SFC = () => {\r\n  const { pathname } = useLocation();\r\n  const [title, setTitle] = useState(\"\");\r\n  useEffect(() => {\r\n    getTitle(pathname);\r\n  }, []);\r\n\r\n  const getTitle = (pathname: string) => {\r\n    switch (pathname) {\r\n      case AppRoute.Overview:\r\n        setTitle(\"Overview\");\r\n        return;\r\n      case AppRoute.Invoices:\r\n        setTitle(\"Invoices\");\r\n        return;\r\n      case AppRoute.Settings:\r\n        setTitle(\"Settings\");\r\n        return;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <h1 className=\"header--title t t--alpha s--left--med s--right--med\">\r\n        {title}\r\n      </h1>\r\n    </header>\r\n  );\r\n};\r\n","import React, { SFC } from \"react\";\r\n\r\ninterface Props {\r\n  name: string;\r\n  price: string;\r\n  date: string;\r\n  status: boolean;\r\n}\r\n\r\nexport const Invoice: SFC<Props> = ({ name, price, date, status }) => {\r\n  return (\r\n    <div\r\n      className={`invoice s--left--med s--right--med s--top--tny s--bottom--tny ${\r\n        status ? \"invoice--active\" : \"invoice--inactive\"\r\n      }`}\r\n    >\r\n      <div className=\"invoice--header\">\r\n        <p className=\"invoice--header--title\">{name}</p>\r\n      </div>\r\n      <div className=\"invoice--footer s--top--tny\">\r\n        <p>{price} HRK</p>\r\n        <p className=\"t--light\">{date}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Filters = () => {\r\n  return (\r\n    <div className=\"filters\">\r\n      <span className=\"filters--item t t--gama s--left--med\">All</span>\r\n      <span className=\"filters--item t t--gama s--left--med\">Paid</span>\r\n      <span className=\"filters--item t t--gama s--left--med\">Unpaid</span>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Invoice, Filters } from \"components\";\r\n\r\nconst invoices = [\r\n  {\r\n    name: \"Water supply service\",\r\n    price: \"124,32\",\r\n    date: \"17.4.2020.\",\r\n    status: true,\r\n  },\r\n  {\r\n    name: \"Internet service provider\",\r\n    price: \"168,27\",\r\n    date: \"15.4.2020.\",\r\n    status: true,\r\n  },\r\n  {\r\n    name: \"Electricity service\",\r\n    price: \"245,12\",\r\n    date: \"12.4.2020.\",\r\n    status: true,\r\n  },\r\n  {\r\n    name: \"Natural gas\",\r\n    price: \"224,95\",\r\n    date: \"12.4.2020.\",\r\n    status: true,\r\n  },\r\n  {\r\n    name: \"Netflix\",\r\n    price: \"80,00\",\r\n    date: \"10.4.2020.\",\r\n    status: true,\r\n  },\r\n  {\r\n    name: \"PlayStation Plus\",\r\n    price: \"65,00\",\r\n    date: \"8.4.2020.\",\r\n    status: true,\r\n  },\r\n];\r\n\r\nexport const Invoices = () => {\r\n  return (\r\n    <div className=\"main\">\r\n      <Filters></Filters>\r\n      <div className=\"invoices invoices--list\">\r\n        {invoices.map((i) => (\r\n          <Invoice {...i} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Invoice } from \"components\";\r\n\r\nconst invoices = [\r\n  {\r\n    name: \"Water supply service\",\r\n    price: \"124,32\",\r\n    date: \"17.4.2020.\",\r\n    status: false,\r\n  },\r\n  {\r\n    name: \"Internet service provider\",\r\n    price: \"168,27\",\r\n    date: \"15.4.2020.\",\r\n    status: false,\r\n  },\r\n  {\r\n    name: \"Electricity service\",\r\n    price: \"245,12\",\r\n    date: \"12.4.2020.\",\r\n    status: false,\r\n  },\r\n];\r\n\r\nexport const Overview = () => {\r\n  return (\r\n    <>\r\n      <div className=\"graph s--left--med s--right--med s--bottom--med\"></div>\r\n      <div className=\"main\">\r\n        <div className=\"invoices invoices--overview\">\r\n          {invoices.map((i) => (\r\n            <Invoice {...i} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const Settings = () => {\r\n  return <div>Settings</div>;\r\n};\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport { AppRoute } from \"const\";\nimport { Header } from \"components\";\nimport { Invoices, Overview, Settings } from \"views\";\n\nfunction App() {\n  return (\n    <Router>\n      <>\n        {/* <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/users\">Users</Link>\n            </li>\n          </ul>\n        </nav> */}\n        <Header />\n\n        {/* A <Switch> looks through its children <Route>s and\n          renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path={AppRoute.Settings}>\n            <Settings />\n          </Route>\n          <Route path={AppRoute.Invoices}>\n            <Invoices />\n          </Route>\n          <Route path={AppRoute.Overview}>\n            <Overview />\n          </Route>\n        </Switch>\n      </>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"normalize.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}